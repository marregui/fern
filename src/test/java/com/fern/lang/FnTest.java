/**
 * Copyright (c) Miguel Arregui. All rights reserved.
 * <p>
 * The use and distribution terms for this software are covered by the
 * <p>
 * Apache License 2.0
 * (https://opensource.org/licenses/Apache-2.0)
 * <p>
 * available in the LICENSE file at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound
 * by the terms of this license. You must not remove this notice, or
 * any other, from this software.
 **/
package com.fern.lang;

import org.junit.Test;
import com.fern.BaseTest;
import com.fern.lang.FnBody;
import com.fern.lang.IFn;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static com.fern.lang.Fn.*;
import static com.fern.util.Tools.str;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertEquals;

public class FnTest extends BaseTest {
    @Test
    public void testPredicate() {
        assertTrue(even.isTrue(new Object[]{2}));
        assertFalse(even.isTrue(new Object[]{3}));
    }

    @Test
    public void testNoArgs() {
        final IFn<String> say = defn(new FnBody<String>() {
            @Override
            public String fnBody() {
                assertTrue(arity() == 0);
                return "Hello World";
            }
        });
        assertEquals(say.invoke(), "Hello World");
        expectFail(IllegalArgumentException.class, () -> say.invoke(null));
        expectFail(IllegalArgumentException.class, () -> say.invoke(3));
    }

    @Test
    public void testDefaultArgNames() {
        defn(defvarargs(String.class, Integer.class, Long.class), new FnBody<Void>() {
            @Override
            public Void fnBody() {
                assertEquals(arg("$#"), Integer.valueOf(4));
                assertEquals(arg("$$#"), Integer.valueOf(2));
                assertEquals(arity(), 3);
                assertEquals(vararglen(), 2);
                assertTrue(Arrays.equals((Object[]) arg("$0"), (Object[]) arg(0)));
                assertTrue(Arrays.equals((Object[]) arg("$0"), new Object[]{"Miguel Arregui", 1978, 28L, 2L}));
                assertEquals(arg("$1"), "Miguel Arregui");
                assertEquals(arg("$2"), Integer.valueOf(1978));
                assertEquals(arg("$3"), Long.valueOf(28L));
                assertEquals(arg("$4"), Long.valueOf(2L));
                expectFail(IndexOutOfBoundsException.class, () -> arg("$5"));
                assertTrue(Arrays.equals((Object[]) arg("$$0"), (Object[]) vararg(0)));
                assertTrue(Arrays.equals(vararg(0), new Long[]{28L, 2L}));
                assertTrue(Arrays.equals(arg("$$0"), new Long[]{28L, 2L}));
                return null;
            }
        }).invoke("Miguel Arregui", 1978, 28L, 2L);
    }

    @Test
    public void testArgs() {
        final IFn<Integer> multiplication = defn(defargs(int.class, int.class), new FnBody<Integer>() {
            @Override
            public Integer fnBody() {
                assertTrue(arity() == 2);
                expectFail(IllegalArgumentException.class, () -> arg("W"));
                expectFail(ClassCastException.class, () -> {
                    @SuppressWarnings("unused") final Long nl = arg("$1");
                });
                return (int) arg("$1") * (int) arg("$2");
            }
        });
        assertEquals(multiplication.invoke(2, 3), Integer.valueOf(6));
        expectFail(IllegalArgumentException.class, () -> multiplication.invoke(null));
        expectFail(IllegalArgumentException.class, () -> multiplication.invoke(3));
        expectFail(ClassCastException.class, () -> multiplication.invoke(3, 3.2));
        expectFail(IllegalArgumentException.class, () -> multiplication.invoke(3, 3, 3));
    }

    @Test
    public void testVarargs() {
        final IFn<Integer> sum = defn(defvarargs(int.class), new FnBody<Integer>() {
            @Override
            public Integer fnBody() {
                assertTrue(isVararg());
                assertTrue(arity() == 1);
                int sum = 0;
                for (Object o : varargs()) {
                    sum += (int) o;
                }
                return sum;
            }
        });
        assertEquals(sum.invoke(1, 2, 3, 4, 5, 6, 7, 8, 9), Integer.valueOf(45));
        assertEquals(sum.invoke(1), Integer.valueOf(1));
        assertEquals(sum.invoke(), Integer.valueOf(0));
        expectFail(IllegalArgumentException.class, () -> sum.invoke(null));
        expectFail(ClassCastException.class, () -> sum.invoke("2"));
    }

    @Test
    public void testArity() {
        final IFn<Void> fn1 = defn(defvarargs(String.class), new FnBody<Void>() {
            @Override
            public Void fnBody() {
                return null;
            }
        });
        assertNull(fn1.invoke());
        expectFail(IllegalArgumentException.class, () -> fn1.invoke(null));

        final IFn<Void> fn2 = defn(defargs(String.class), new FnBody<Void>() {
            @Override
            public Void fnBody() {
                return null;
            }
        });
        assertNull(fn2.invoke("2"));
        expectFail(IllegalArgumentException.class, () -> fn2.invoke(null));
        expectFail(IllegalArgumentException.class, () -> fn2.invoke("1", "2"));
        expectFail(IllegalArgumentException.class, () -> fn2.invoke("1", "2", "3", "4"));
    }

    @Test
    public void testRunnable() {
        final CountDownLatch count = new CountDownLatch(1);
        final IFn<Void> fn = defn(new FnBody<Void>() {
            @Override
            public Void fnBody() {
                count.countDown();
                return null;
            }
        });
        new Thread(fn).start();
        try {
            count.await();
            assertTrue(count.getCount() == 0);
        } catch (@SuppressWarnings("unused") InterruptedException e) {
            fail("should never happen");
        }
    }

    @Test
    public void testCallable() throws Exception {
        final Callable<Long> fn = defn(new FnBody<Long>() {
            @Override
            public Long fnBody() {
                return TimeUnit.NANOSECONDS.toMicros(System.nanoTime());
            }
        });
        final ExecutorService es = Executors.newSingleThreadExecutor();
        final Avg esCallAvg = new Avg();
        for (int i = 0; i < 10000; i++) {
            final long start = TimeUnit.NANOSECONDS.toMicros(System.nanoTime());
            final Future<Long> timeAtPointOfCall = es.submit(fn);
            final long diff = timeAtPointOfCall.get() - start;
            assertTrue(diff >= 0);
            esCallAvg.addPoint(diff);
        }
        System.out.printf("time to return result from executor service: %.2f micros\n", esCallAvg.getAvg());
        es.shutdownNow();
    }

    @Test
    public void testInvoke() throws Exception {
        final IFn<Long> fn = defn(new FnBody<Long>() {
            @Override
            public Long fnBody() {
                return TimeUnit.NANOSECONDS.toMicros(System.nanoTime());
            }
        });
        final Avg invokeAvg = new Avg();
        for (int i = 0; i < 10000; i++) {
            final long start = TimeUnit.NANOSECONDS.toMicros(System.nanoTime());
            final long diff = fn.invoke() - start;
            assertTrue(diff >= 0);
            invokeAvg.addPoint(diff);
        }
        System.out.printf("time to return result from invoke: %.2f micros\n", invokeAvg.getAvg());
    }

    @Test
    public void testConcurrency() {
        final IFn<String> sum = defn(defvarargs(String.class, int.class), new FnBody<String>() {
            @Override
            public String fnBody() {
                final String name = arg("$1");
                int sum = 0;
                for (Object o : varargs()) {
                    sum += (int) o;
                }
                return String.format("%s%d", name, sum);
            }
        });
        final Thread t1 = new Thread(() -> {
            for (int i = 4; i < 202; i++) {
                assertEquals(String.format("T1_%d21", i), sum.invoke("T1_" + i, 1, 2, 3, 4, 5, 6));
            }
        });
        final Thread t2 = new Thread(() -> {
            for (int i = 2; i < 117; i++) {
                assertEquals(String.format("T2_%d39", i), sum.invoke("T2_" + i, 4, 5, 6, 7, 8, 9));
            }
        });
        t1.start();
        t2.start();
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testCall() {
        final IFn<BigInteger> toBigInteger = defn(defvarargs(String.class), new FnBody<BigInteger>() {
            @Override
            public BigInteger fnBody() {
                final StringBuilder sb = new StringBuilder();
                for (Object o : varargs()) {
                    sb.append(o);
                }
                return new BigInteger(sb.toString());
            }
        });
        final BigInteger f150000 = toBigInteger.invoke(
                "6259685222800322711619182247142210069562580937690422560416664375511245182019089988816218893943603970959537419863161454321217501389",
                "6628218075652076949954851419347570101205882902440301466286267793074709037305983909085132070336329646467983789796108230877624855939",
                "3383052094151901627006443222583638148579478516648373987775399250162786799666128808820443597147873794404425289862400530450888280822",
                "8745821486143285220272358145415344908085031308944252046807646858645264596453349460413869984542663299628799062678195810382952743058",
                "0000198275617646404800438361272888232651578038777874395940404868265813331565984727218719652968353826964251255205705262390339415085",
                "5734110499268683725701344668908318995117533599211874349226504742064009571933931325710731165805517490316213041127737437131531847053",
                "0235108790735807848200147230229643252552389342881903953928210142105146485470339590162259275289400465528127601376247061620241390700",
                "9410243543963229085460156301646652543144150804524402123500737349599063220797591958003587661410479092389967607724680073717811393515",
                "9080063018811020263948882917482628044513534481333102049925855320993874523415172440446172989077204194520199543489640832439885990953",
                "6136095115634787889177088650774239801102584753346829842507941748614933172983521998012166816874241957208549961544080549821722556635",
                "2843197451958215027742428669553667071099125218748938651842567724152246836043731097167935033005866000818665103247950307809336410612",
                "9756349693151451731509107447083201083962319412280839768828079348820095489822400767320920691334620808513551153878854910440569599961",
                "6738899444886315122480077178507226695121133458739772371999084532218484728170551018021842757619303479684303968906945955464573066832",
                "7161295265380190637005009283710262802742754672328605261349824174135947326033388662783628143793302343069657408497272088300860964388",
                "5175392958090999796386778287741142265184020169613198414096734797878665547966422107499302921125902239007140251228525175463028282849",
                "2556217808916080542544947082350815690422068491927479775774419558682803962560188507300921339902585118786560123819087986762325167554",
                "8532323515315952991185325236693685994045669966420035397266754220492287096056898260952049999148044659773366367277409012860583723034",
                "4348097551220028826709832227585274833339282790687524384007468323438496825022035294395244188055366469447307459710709559457188603495",
                "3824406205556005307361444760172102822547423423657368548834561533000027121853527716872216468674620806780435015755872032368674141853",
                "6292614403119037066859651046631255729439279386756470674850794682945455774666546920484091963424289366238646097389467759834231751878",
                "4424736119165794418100856142392648622629218269491202243526652202747649308430481761204109238301091451435281937891871362924725197650",
                "3014037476702340608749931644740105361184018401696824511094370118314013084274468629387173474540394626381010510640415654473174764167",
                "6235037481776038241028417544857019227652338994975101679798956060250600790654612415259244302869457496659049188970624008207012021513",
                "1732045895744027922265629784076521359724293142528754668169210790711512960156698862509524666331118792119639207383912321867870014438",
                "4190489075416412022558842111382380042521212237329448231382834428860709753739039167617413564360252209097468865404390806917288622086",
                "3695263313514073169290083250878638498455544682184356566992498775701189514442888719853425353792512996952112764169065567150915198733",
                "7985017276292790701932272231241621626838961451537647000461081683671286458086124942733254031719747545758831405622640958900157221142",
                "4718802731784630074700100714473238415842477303321289332552384016372338914889686926719596130620654765435280983964478860136487126007",
                "4263847626566708164053087324264256772000188429834979944531018953053288089393779843369388386027014755731269603547214478791230442992",
                "0858067073355290706247042523229343264651396349961508581030023240705531852713080624725930980257679044390189869206012757204289130586",
                "1817452119795841414285620669087758053798748313259474870892330827985605980532200255852356103402280205236575335124487150238096108862",
                "8842255639075208055448813656117601432563280767063953528291831567449913222636518702856625417337562866803663625478038822550437545012",
                "5068692918940610881628467865172878221562133327848212301427018810447394975066148711472439721982308248475105498765740388322412903896",
                "3946081691899284940499186511308865637130123791916719647383420112458006464439184293364520407305869616248075534381443867134880124894",
                "6224764325244150430690353036421663476880051505892157848183532220806387536262752415771527019869654949008951506870847137464117819981",
                "8627734258887728801013625370124521991582205205456379672865512782257179869764511156738485421616162827195507791985055098256552470161",
                "9772962851751578588653573636816029092274786994956316625465343650690518160827483541838100767283179696683060024897897532463101839376",
                "3692872423713016840100853199766101546151386763367452768945112768287885023556283457242487041694221046268636150688533634239551093824",
                "9745380816563661442882557473918203383152893125286112322238869914274467654301004930850091133611643285159043759974694567097514898995",
                "0491694400605923974323698930768684135137074743595371713282845039164197474634760651091344634156890511966168094701065002226025237371",
                "2640992912488645167884068653890764051189395493157587243658541391804136640531506685638504704678039325800562664906487940978638271073",
                "1185841309608614335908391505531947690169078451760791270496887110751931150756605559918770572118699074673015181431515169895528627299",
                "8263048335284981023032888760921651658039998433709256298011187261895536610733855576552811073374718287052774718644053501935578814699",
                "9741323062193051140800093396693308304098825568752116562109228128314048832290440577152265053773813301517062939915944741978658531329",
                "3888787431515367019395641539183234938616931757017456479306713620683152901187156873582712776004341719678122209321722105196711399731",
                "5794108247105726265705241089573994747743255664932116448381736221235108492959937107405928502381539317074505653048611176017012812623",
                "7700587214123529199659737637409816010539587586348990133652215822970592557684669657684725780794444256006752471129052932995335315650",
                "7762610390037237729723315699658277990102966224207034335624826220213489633559832177299572969932630819967998524391841896119507624489",
                "8069466249189421209337399961316884922147403769207710032158258129904802072883794487256483602294126330530365961609263917000127144731",
                "7384978497786047183869877755425110403713102869106631175689393771642658586021220600164065235246121581071480386805985117625731429576",
                "9197862573774045180969879044576350200706006998581262652435341501215797508683596309911088673590547959532744491623332173184270837524",
                "2115906176722143436665919928702513499667343355589293489233498175890818552750372826102248087525388362416953663410968443370517236781",
                "7863168597042944351737444052884321206535731797439834742417740148088337828907912422849587302195796172686833074243844128788597367875",
                "7860465906907754504701911202733054155708512409629461748425372368934118112661818715395822348937240485488773305003263479318368923610",
                "7944589905308505263878597100390196131312255181024530226597491449808317398816290113723392691964857923494439677476635323778744980690",
                "4471581901403290375176747874999230350805187276113628335495547163379075883828958785470456348323903382144686743155797372732219216547",
                "3561188065772996376687783761854804795840720185231095758622116342311249636523567565566774085967320939799472524252555604267120452006",
                "7292623644013228830573998083698856289555532790025317381575901087474930103450027274717343667033291535180252637756920405641320847572",
                "0869747119090268008329419901927694471644738392788649169787894529546900356397208985741532568673067371854593264211503890037382933814",
                "0290969181662154005806218489954662365235884252906317484622826248397862579339571491281446725259006324213442543767154153448799302683",
                "3054165614524628007098523801132815088671665708122973181642833659586366277989000387107327627203970135830364129684954984693223094683",
                "6145112653785004495358124974590579473286485278502927131632430689917022550814858838412993777445479342849543675544556932784403844939",
                "5877734573197118251591885548854047372690212222613539164572625460568342415587373353314179183089830237081799673799738958142661752382",
                "5067666892840259465001747999249802219051629327440287171697210279448874080253008521120137564116820139497775271476966688098105014691",
                "1514388266687868444002156342999382403792304116659398850659600778126830925758287130845048225634365001273219757306926167111528394325",
                "7187704125635499999310306798290766104090841975005358848112923597993990083611442874004913480068456132556333995674546530425208538703",
                "1526446165103444186707076505514199538245335455528925215627458207328552222106756780632111815999653377748919104531121419015310617724",
                "2585795554978523492869300667998256801520363371392634140897921576418209041519418751077594286774864782916012782264626715437354097880",
                "8464707543093269305051191486692146774782108569336596427925581661171495772939933478749961837942702547188158164391064277187839872345",
                "5181560437349297226824439152514186951288851933944957708774354293335372289433246667520982002018206129925696055066948284902585231213",
                "6412135175155318173338643769927236814789994663726241238222075870689129533710543637469990610792859057335497335064747281360171033618",
                "8263018621828954165115055150100455808758815882763577750379543935475532135988845832284429279337484084281435974263698140113449037145",
                "9290766356153608655688705230577180425169242352042588783096873997072787749086003592389212602153210598181349452025576210840895792811",
                "9898615449913711427419225332703146056158848294368929567136460277507002727847335618467105237064242940277826592037509888836106736833",
                "5277564916996595226134976122904717769891407903465682882008688437503791193498577118628099805731006408506144729204083708763636952584",
                "4437415086642751264408800490802326680255782581988137986404564026675497505485996806227968723059346465748996588129616963271257298305",
                "0901098975942059805193310124013233285123072161618781281845579720538419725777377357553810339391311687474400371250112948534229842291",
                "7051166954140942259455523338080858803374433251024766068843950188205497595221127953970403873432265405858744682463177612098309253538",
                "8507304113443973091986217888513172008286351913909156601582920332814795150110618206365156549602974466088364737568166393289918519830",
                "5430196019496142728688315536436129771766635457510473580786999409823603101461596394389613549880755511904133077571739612251708969388",
                "3247012862786247104409478576386571180407381407041849157648268217390153107110668052805321429568908124086966828700814288847678643429",
                "2856966821595769226939791139313459193801976298606786728457121889054269929118083048198039409836102037795550110314479810614168480862",
                "8712802605472437232077539278073191952861737495684152643839477577192318285428475153649602730761355901012330530129130182583538765082",
                "9442328723053152044576307508503865979994046085761755097893207502278910991056537148910250172573573333761226261574437422515576498267",
                "4635235419001990430007858080943100225452542710127270110142892504755108559254426441239236311818070504098376870849967480148205515630",
                "7756987554352516062070387512152792539631015823474005859654249072140199976119525076251050218342087153018314286685683851220846656813",
                "0893777403923690304062819041061865109973362097481806454886390805018707468174152645982338186941550509416446271380326565419086993820",
                "8993763983978155687901695365591259482645009264114945962934466322056399665986544165719858565572910511446493138539680669967291140245",
                "8499353696843085895142896548076025854832298555017843763802114643682709330680162893250164109106479315336561532828027384780527500523",
                "5137376600300280505546732436672541503300873306336192648741339478806207449499317016096532476529480977525685461514049392900505034861",
                "8755080429129713279264034617265025412747634577980147903319703093103697239720224979842067563750969218557132892645077836038039334551",
                "6341131673143527031707107770768578116306961181787322240631871391368714373153491889831852698579731869010648622666796482387210459937",
                "8337092524592776761288324672445247489505260398677333894052893173563697229381330584879362531781889246778360898480766040988068079237",
                "7856047229707109992303682888171238084614804754162387396979087931449736576389197858683303509986982977504769726260473080732303216761",
                "0125815038691346347281931938915663834947047782210391131809055484292937774774770220642995042713969809351016514375237010690830809675",
                "8056178670640545712283429190899444385173228707421242297815477982696889887821532923736639190798343981378086996663424803078571435213",
                "6162736880197247015907846053313386061231890238543014444889324764265319277870088042245056775100823134589119414760575886747295949067",
                "6511417925575284940927497898074466725427920143175464374076791200215826361086055424908043261498308615734320140197993056922164442480",
                "0908095863163389553605888450075740271560842476077826418268100056749004147167497901100883071919837019001373663109099862572728206848",
                "7247544415574634705524849766814561994089108449819052502877959409412269499549724627211010611980806097809883182788467093295273360003",
                "0963383926709961235380126564722843336771545902126478356886557385955467256511214560151051415391814630276592753850596749469410312751",
                "7077893261269005804193976635947339192251776960296692048329894320902999466464216251986669678097666930463764453573937204911530224275",
                "0625623471951369722199172635009458532136207154449968140646743272556002364244099712663989096673186730207467188182224552091839013714",
                "5241498988598927739382273477406523001201595150067588910867287375154080736790885626620649470818483128468976948468243413035512641556",
                "6339745374027173652053942306080952154229160411511124944362672045437317115574653821316461665987281610798883438552924879337165795163",
                "2912232082997214675627153719903664685014341986851138247158113325386072555858621858632029107076174108131901108447352242978898041320",
                "2606361687072339901564697929110281488661441113183890728560705960007957237334136716807905730711556425852582406480979417589081808783",
                "2524876683499804231630084894277324075986385656834691638136241418342576314806247020599198092083053469478237368553918334853925028953",
                "4461378816349758975626808009339526885158971851240120285949911022537058328077162644092461910624342995910977874118937807698628487331",
                "0422115258012885136127208741221268032961560268756781084044946834734476158324015072762822938762908595580345707250592380988512954875",
                "4843585193781417980792387639619783821116860061443562634972454082095644991612844600751960077781460395123334507381846608351198019923",
                "9014657991629474934604097398171627816171150158721445956039977493100524999332921697900248317660843138646244263770242212975648430966",
                "5372240768140375679914158094219269590671143442162703538554672370477999865941616185488026917480748296200142638686698727563133917921",
                "2603315364540818020262653232171977271356326057349366269907106179732091519747427725519892968145241749049441868676884359167568086527",
                "6759490317051319846995617943843153980595339168532107029124356530469178433899207097481412192572756103293426794298528884972974531277",
                "2645301086319932752033912080152001084712418997374635261325226245153528069989617730882612364013712098499171549222455315975683678069",
                "6281509425193012577186120640185102183712756253276797073051156456781002834682267809140902575847578127957230244492453686452766784187",
                "7361500067491088733284907832818980475704314728121006367731585253707427466584194110505585231759071063562123249200792221154198057350",
                "1790694919823775182248441984816090240701654619120120741335490480533736740082703798212305288873524185002604644184424213234101853813",
                "3147910190371229706155657654745509479428393113116126559107349255301882413226640662509973106721514410231894975381083580966627906062",
                "9235668028634361309362652227358779614026583494948484232934012789262753110594953801122433223217210058762721077291340964931873179126",
                "7607093565864546471165612296895320642368507201819599951100563920802896652419442041432540084267266118620037348415266582060847521396",
                "1172630494916201500444093150884784911272707262925338636780018120138926514346569173104242390559094650997432740644132368159637853499",
                "1325406124065409993966169691832121858522596601527653696797961637054987410799508962906454403597523984223070020422196288291589676278",
                "1065824292254683440249839150367754168595030715877224589306485593607916635200925994450868966490599238402404101458820784017353596126",
                "6451991755646256652102483446585523577687556253430635559407130086005551281551545539217050427037063980139832947761710894195493582222",
                "1322872798493911445339315502929331345883530773704433520594231232201084347384050822302439496357681676865751868653654985977624927375",
                "2066731651896701512214521281977335927749978326815605373071023554391771954660838222103159642774741537841087811106070313198950260943",
                "8672901197630222274528639335702581874803639843005769268463667028295037186364592295299319000155356352801264513162236839273786636172",
                "7347905338281970035686433184454633707010302142929470693282266125238044451613718225854870015504937439041487008950750225573177893955",
                "1501084062894372573517380535075476498887795924220182113371190232312447142228927448461286712413933701082755108112263511800583859755",
                "9613657800675029516871653136610183309824202854201269370342956958772574373129351103373971451580774996251825614048971947619102306645",
                "3895074068057751414952008226900011778868681433424196526172447925170006618303561938123185807654714823440078353321476694732972973063",
                "5910600349530195045244960033975079582589922861963657518398104004865258622450050689907828232328451883281380787483311469040469385297",
                "1915891361361058150885377171233160519182360091841120565647847677703591005091287765506399480551533895838882703302930283005868234937",
                "9206958501606693268234913834873773996933488433505585422622085566838199513905653266487551804435691012808884647884285635560289927587",
                "2160841889370036963843667424052657103117357493943876324103048214153218183163073280993613488882611453362074413310826760513124179728",
                "4451761726152894268951207961626180554491253378042549201869862050212136435437844028572935204097441385633491902477363452253250017099",
                "9842008800322450169899404942596796115399231085033743040798866201686427430549906610294411969954614518858605466217302367866513583164",
                "8573718987384060881072787418259865093101905808303138966671099720923163111699587050092732748785810429520824210055714942788884509650",
                "9314906133611255288397533824591562436006219746487906410126115738611807216304394010619104763301280704957951691130585735542521577564",
                "4241105155769858154526735861663225081765094003831583815192822110676543748620026778856439529273468527150276376092607142020968983144",
                "3216667046933296600301650002154511292304158241285636620596091700098854680165696432672832070342962672166801509491372933889793521934",
                "3425370434031277812303406766963142985260869062088346288016987532005820537083175032010528458211417032995731024293574548873968279375",
                "7144800944789755744376054787166933548538679467906137625631455778116192552622966233126433028484694792282548309064909950077732271032",
                "1759759875015921274548772279234237128181189696239053603102952296311300101268693752482251308783426711030842978779668905562346007967",
                "3145018875597780816312100277510913409987694313398700164317572319680639394804626039771841420815580461083201502723326371454927689297",
                "8728276887451381713224350784670051588588117238053795209296294695630577916221062401889877072723278858026753187602450190205596671559",
                "9054489797241159551469104141927923936266924340577302173738433237368252854191453796136864177583569022572819509469589284468185034489",
                "9931158472214454800060187991925853931080728834482035450742300238190403539163852053987412652983434047795462185426698640774892831290",
                "6104221779911326391787681659208311570118309287112013773780763395095371040933526705701621689219109352903632945411945186033638981140",
                "6364195862919631221989373112517289523126546995145716171220787061663859411613823802147725537983343613962968670823290183841814528722",
                "7814033018397230904842805746276076828465172679716732412211732386565837933266025287966509102754340165878430147206449485552101182204",
                "9874511778244465335889118504531794693993991838896293148380821051178706257913132833843903978993586660660115096751820600405227138492",
                "0433528220309134689004752059352762021785382556025620663698015612573795109891746673652544913001754245167001762148685453571993602131",
                "9791640479715773287571860700152131530345260282084059502431041302905248161518898887242321900650401080542789633726992061025410510875",
                "3760767261318858288761053618535590956811135530311812220087839939383158622513715138629907139241359873965974318177792107881676762264",
                "5316037069674756870912930268084380606352964024991887533693626501246613688733521890461547313109069581238846470767489625514030159530",
                "4686156716059944918257532044299949268487719356368852360748978265139918708648117081655479713481881073520147471924599569203695751372",
                "8792567239792816588212632132168607318559588154172590004594702784151019771302942868507943370671415361751345802263192707186266074075",
                "6545514678164842059893454737753841963185448991995567969498405420561558647622853322769882668431016745997539202869833532238120715025",
                "6438949184521960542572387635262013560343090367626722265463974193416793760422843075008905945798014706739667664292144716820184049702",
                "1933313838139199153707941915043920757903036338366678250571370293407925276762610380347250715620570511229418572362654958044255173579",
                "5887102140658024485169748945050361306146971803182813754511976794916819523486176442452101731605987934672887283018316141622937272734",
                "6243855240146121505413180095352924505909641493684253390751312563881145696005740401362162811643695233070664449138369492892495194703",
                "9946284415236470062615494837910877523666854690998594449659286166446012510456639066326918951790868549820734551724181591061945889606",
                "0488767243810266057683117274651990991835267956964998864250150080280890747161408257664524809364046704139177707267831726671804671005",
                "0279236131714827042318794439140683261808301903107075363146453246295139842357063568229354360415536975465941655528903355987431035468",
                "2016308185117398883771792493797996725447411914014651777813743582049351093468292412517755666150111185737224431324570327932241671024",
                "8872306747295662353617756065420240979190203510074944326009869390607955198213538328729059338788320888795467602575556074676017361625",
                "9006052125878997165602969586449725306343736407601366354962185818128924541724645619838474577634614731387565827034504883559636890499",
                "5670529582434868623548792136612282119710026747208697368421217712974522645369731587567957330945352015044722234460893681573494465824",
                "1417751258354317650920333877420148442180940798528500646668477113589353209697423163448404428729539919245757584095889822161001284167",
                "5858776622829221687285985835262550594064151922911142747518610959055686241405032944970118343926674917917551546936879276282800507689",
                "6828050484240255465295428075634433678869507600218905230330720730039602908003496531572581419867646506059872990016112283233171650735",
                "6625415505978457750777449687164989951551641871368605540301860630160906113861622911851566995707586238577770433482537632974412255057",
                "8833156267960718711136765695485678163132424170042838840680860264931702410428911441734052198084419146000548792264665833660863382809",
                "9449434410771137278267612114024034432923379023043557551191492887575971472020974150831331535496621970695199936491129780942876051923",
                "5008883582402904675732705160210153046316026567775427906350158851275347466310739897871848418456871163216007302383720184045325889578",
                "8229555938657335010170179823790018080314361818894545388399454304965684664459245823401954020740904276203350768295272763391503320852",
                "7519426856594000035306511840573048424978620319677166646343769655346584968996272400532312896930507026038122263322386399103385351695",
                "1362400208187558696085565245465681192122238812504983281051635415662970091761270761583273673707893579395343851238947259344886946752",
                "8375199873597141177129582185888392465397871099355043611005020275983881232528732223265608413531459539333443368342004437175270003375",
                "8503458711654428527833381744492413406279973293143333245171966306352552831081089062824465790152018482298383776290097126370277653612",
                "1710628417442892021115282041282784432464781730850847967117457902760801531953869309561907480578740898636119223170286776074184211572",
                "9883626009257667173237199523492573620888628294706286714901730063271630200254343347654695312388112011236831780523558620540077894744",
                "7959323021759827763521362364959345154506752472208828085592666646505590892994356615640162706885656623399108476953006891511519347691",
                "2989211278917124423765552787226183247076958937545258882146888667861254654494919691098342835200449536430840777370905098628672161917",
                "8400439083997442906756869815912627348127233909179512425687597803114198650700373752424340261134929437778071652205548679099421174994",
                "4783027802017824538344473689492344994993755869067485067682701798365595496130517650835750430514642392294757090304460054593208333550",
                "2791041595880445434279269178180492197858994373007190465261781523998199416873420051171371451550705323112671181138299856768293933039",
                "1818723469701073781762601913333813065424413504345342036121876805410056307633535348004603881767463337388124084539878297298111644452",
                "6662573927519895175676975942938488108721626889952589725299740680228514774406523923871960410485534606154835845868130314287057844457",
                "8066203013848978067567928823989792496528274910739103448937800659833581535194691477089844580576922049773074521377740357375161558184",
                "6108922100321569507563957018085475037903546127723087662617581757530340111875190377135820837564420745478524070027848303684617035455",
                "9599560648942028064398176043427524869962927971594705143643699739885608385775141631822190183955997850766924701823422779683911099871",
                "8444040705329024505495681730008173236242407965668865528890822493492240565485409117423691240554761868855721184432465998236508930142",
                "1666373550601206290440154405759930783933449754157234164277276424440485419728952450157004655825183242942660767629860066441083133718",
                "3569893113334206009254637666815936183903653371985391884286695920201772740001028134310179108367109147057760932652241816299125212779",
                "1568196154922422180738257868199206684037711197526736708431820725464400879242813547646280682303129527846644405206604127038304783568",
                "6415874602038457828871980863338619025125830039598065483191333375220338616135417963891643511001921280209791077946952051963253260351",
                "1686625781725418665194450373870721719440963732690374641925558110195056240209092673649058335164150684323158179382340096486820835821",
                "2581256909169961125749716712482573262615710106044380605536072823983856456057850315989237317219644909910534399190967723891392841974",
                "8333405213464055263125133995444303623873941222382514126797589690190234366133136824709946678654283435810701419633335004071922796687",
                "8826646993874607282326262378516607272987996531919087622136413703132746034298123382552615512388638790998235115844271193375885429310",
                "8734688641306789566473256135716799799070730330471492939235585359178026257167430502431655215125474950258126967243001500066161281969",
                "3019973361724369793056954666117479685019049618718793658986946072309345872361393303004379077490741687846557239283090797330738389605",
                "2525070910998579487930149150224316945370144044919106524044570047750332606057549732052946840542361022945082857019747564021882408288",
                "0733631646852911738196289670884162282426068034234954232025673222508272464359510233163402272579315058688245709813863946678341269358",
                "7752746472406533875950980438381788689726621074625429442832676765205173020783180331475327155195039747881890187699229479871111698876",
                "5333056644713051487392785523422228412427023184890055505072446262530104003328659967664087920602191196605724078301950022516442636680",
                "2653146717419094587394360311718987857927519283917736752803134742489534102412495369298542452997919318834736983723262291471979151293",
                "0222375779681963172383704385964382457741824736056842901854332667552910711555221743391835093434944948094098468525001004868149525264",
                "2965974333854173727360905961702991372693197422814881623670209844535827214517231470346309398307371061346424425687789132311307893036",
                "6013784000582313050086000124752201424548698806545089458856719355713831341186744810237364955899648626639466056828653949699361034146",
                "6961372222238249952541574429334548768145930469437988042305952777354735539163643260501621279877571952622360130485646577063901482916",
                "5516951984612792952995387447840200138218537910407986154917594969047663637509388411148719003346459859213757387375810579765624932650",
                "7309852015182906496535537205194042602367365237565074051605324275547334172756991257004964228208819552726770688280912055966189638060",
                "0460633927116219318294721504875403164741026136192806617137742194175298724405125473274718800053050245869267159035467884842184016732",
                "4000769630711963831684635209364557581997012615720917889399179452421488468940393124352962583891823187616074492000150309656525624378",
                "9290366875717996018653555739424943292611468484647547429142334496785953977320898082492093116074490128834048499456538635111305230182",
                "2269898401876312079380479221524023454461387333839832275151902444097533478320383638950318489822075429074653911089659722233819143456",
                "7206580440451513267868894834954077848461856129279135519021847810519520045612430753117067201193352576535559727367683576319931422719",
                "0530999880558284506877268731021541773223781660574976577301291319094430984710365468355437016602742154005545768436044850195950338673",
                "1160879395123138352694909849148962262655557576021145675588305834815443202904198972376396300346217950400666258987501621958030729904",
                "7406719340678401552392143693354822150743739260196200550533742844607818050381077006495894096185664178494517748093593636963816145339",
                "6199690465212530730240670125393345427983474280976607415700834712769060380795032991912528643615450619704772199698305958397734754712",
                "7574005974161335111501725845497968487503559899504661685418237900056572356248332885128904117381203002805640624677767427448042344311",
                "4939810279349711387208551598390865921135233642891202169178190421028049244048454515954420071278058228579860247722300254415053825875",
                "6435716535351271764590475443404823272952562970028677036009766226822770741606969246932107786395730672494880397821329445166171674147",
                "1994689668255718479864364690064982154300400755309584337200478488027374630888300985977574730948427139466186709873816178647756362065",
                "6118127497368120006858097047478173190688615017136606786885057250416110869698271368890191938202609592909866559728324752885814571058",
                "7147154651110924144942127960608825089287973524279192401344239512688567630647243708473713388119270504638233740893496962797527589779",
                "1244030161907491849357649593410100272889008526988126325915504862679712631090591961417669143866907552085618283488854291070763696760",
                "0583457580790010905296366624200018884853230589794517203416335321752886310975976622473317330279449199285457152231040526695542117188",
                "0260835534300932565136398893344820208703598545552252911242359481099664109582595112286769564242197806137270303476604202251556861730",
                "1346757220422960673693715007291138496966458423631273758908083443891870571012156734740508446890078362638772113055380016836948346186",
                "0982529750272866146377285490747221071520854130226497985713015028282674258420729999381563953435443498181049195606843446707620766488",
                "9050853429706099718521903919485712047446553398060930399584269009517880950636537244351170391788523015338249717338489723252573972852",
                "6840856351763426962633759693473302218976582270015270549967500448799050550491194405613852646764539082758329538281056766911169837271",
                "3887632527607834651294237167867459084734888905331923314726221237877520317932219515827634200119275561334177333308560317864221103148",
                "810616835489800000");

        assertEquals(fibo.invoke(false, 150000), f150000);
        assertEquals(fibo.invoke(true, 150000), f150000);
    }

    static final IFn<BigInteger> fibo = defn(defargs(boolean.class, int.class), new FnBody<BigInteger>() {

        final IFn<BigInteger> fibotr = defn(defargs(BigInteger.class, BigInteger.class, int.class), new FnBody<BigInteger>() {
            @Override
            public BigInteger fnBody() {
                final BigInteger fi = arg(1);
                final BigInteger fj = arg(2);
                final Integer k = arg(3);
                if (k < 0) {
                    return fj;
                }
                return tailrecur(fj, fi.add(fj), k - 1);
            }
        });

        final IFn<BigInteger> fiboloop = defn(defargs(BigInteger.class, BigInteger.class, int.class), new FnBody<BigInteger>() {
            @Override
            public BigInteger fnBody() {
                BigInteger fi = arg(1);
                BigInteger fj = arg(2);
                Integer k = arg(3);
                while (k >= 0) {
                    BigInteger t = fi.add(fj);
                    fi = fj;
                    fj = t;
                    k--;
                }
                return fj;
            }
        });

        @Override
        public BigInteger fnBody() {
            assertTrue(arity() == 2);
            final boolean isTailrec = arg(1);
            final int n = arg(2);
            if (n < 0) {
                throw new IllegalArgumentException(str("n: %d", n));
            }
            if (n == 0) {
                return BigInteger.ZERO;
            } else if (n <= 2) {
                return BigInteger.ONE;
            }
            return (isTailrec ? this.fibotr : this.fiboloop).invoke(BigInteger.valueOf(1), BigInteger.valueOf(2), n - 4);
        }
    });
}